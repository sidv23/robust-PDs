umol = 1000000 #micromol/mol
Pmax =  14.8#Maximum photosynthesis
Alfa = 0.031 #Photosynthetic efficiency
R = 17.7 #Constant related to the relative costs of the photosynthetic machinery maintenance
D = 2 #Constant related to the damage-repair cycle of the photosynthetic machinery over 12h of daylight
resultsPmax = list()
resultsAlfa = list()
resultsR = list()
x <- seq(-5,5,length.out = 50)
y <- seq(-5,5,length.out = 50)
G <- grid(x,y)
G
G <- grid(x,y)
library(plot3D)
x <- seq(-5,5,length.out = 50)
y <- seq(-5,5,length.out = 50)
G <- mesh(x,y)
G
G <- mesh(x,y,z = x^2+y^3)
G
G
G <- mesh(x,y,z = x^2+y^3)
plot3D::surf3D(x,y,G)
plot3D::surf3D(G)
typeof(G)
plot3D::surf3D(G %>% unlist)
typeif(unlist(G))
typeof(unlist(G))
x <- seq(1:30,length.oout=100)
x <- seq(1:30,length.out=100)
x <- seq(1:30,length.out = 100)
x <- seq(1,30,length.out = 100)
y <- 0.5*x + x^2 + rnorm(100)
plot(x,y)
x <- seq(1,30,length.out = 30)
y <- 0.5*x + x^2 + rnorm(0,3,30)
plot(x,y)
x <- seq(1,30,length.out = 30)
y <- 0.5*x + x^2 + rnorm(30,0,3)
plot(x,y)
mod <- lm(y~x)
summary(mod)
x <- seq(1,10,length.out = 30)
y <- 0.5*x + x^2 + rnorm(30,0,3)
plot(x,y)
x <- seq(10,30,length.out = 30)
y <- 0.5*x + x^2 + rnorm(30,0,3)
plot(x,y)
x <- seq(30,40,length.out = 30)
y <- 0.5*x + x^2 + rnorm(30,0,3)
plot(x,y)
x <- seq(10,100,length.out = 30)
y <- 0.5*x + x^2 + rnorm(30,0,3)
plot(x,y)
mod <- lm(y~x)
summary(mod)
abline(mod,col='blue')
mod2 <- lm(y~x+x^2)
summary(mod2)
mod2 <- lm(y~x+x^2)
summary(mod2)
mod2 <- lm(y~x+I(x^2))
summary(mod2)
prediction <- predict(mod2,x)
prediction <- predict(mod2)
prediction
line(x,prediction,type="l",col='red')
prediction <- mod2$fitted.values
line(x,prediction,type="l",col='red')
prediction
prediction <- mod2$fitted.values %>% as.numeric()
library(dplyr)
prediction <- mod2$fitted.values %>% as.numeric()
prediction
line(x,prediction,type="l",col='red')
lines(x,prediction,type="l",col='red')
lines(x,prediction,type="l",col='red',lwd=2)
lines(x,prediction,type="l",col='red',lwd=4)
aic(mod2)
summary(mod2)
summary(mod)
gbm_vec <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./365) {
epsilon <- matrix(rnorm(t*nsim), ncol = nsim, nrow = t)
gbm <- exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
gbm <- apply(rbind(rep(S0, nsim), gbm), 2, cumprod)
return(gbm)
}
set.seed(69)
sublv <- T
library(tidyverse)
library(TDA)
gbm_vec <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./365) {
epsilon <- matrix(rnorm(t*nsim), ncol = nsim, nrow = t)
gbm <- exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
gbm <- apply(rbind(rep(S0, nsim), gbm), 2, cumprod)
return(gbm)
}
set.seed(69)
sublv <- T
gbm <- gbm_vec(1,t = 10000)
d <- gridDiag(FUNvalues = gbm,sublevel = sublv)
gbm.smooth1 <- smooth.spline(gbm,df = 40)$y
gbm.smooth2 <- smooth.spline(gbm,df = 20)$y
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
(gbm.smooth2-gbm)^2 %>% mean %>% sqrt
idx <- 1:(length(gbm)/2)
idx
idx <- 1:(length(gbm)/2)
d <- gridDiag(FUNvalues = gbm,sublevel = sublv)
id1 <- 1:(length(gbm)/2)
id2 <- ((length(gbm)/2)+1:(length(gbm)/2)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 20)$y)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 20)$y)
id1 <- 1:(length(gbm)/2)
id2 <- ((length(gbm)/2)+1:(length(gbm)/2)
)
id2 <- (((length(gbm)/2)+1):(length(gbm)/2)
id2
id1 <- 1:(length(gbm)/2)
id2 <- (((length(gbm)/2)+1)):(length(gbm)/2)
id1
id2
id2 <- (((length(gbm)/2)+1)):(length(gbm))
id2
(length(gbm)/2
)
id1 <- seq(1,length(gbm)/2,1)
id1
id1[length(id1)]
id1 <- seq(1,length(gbm)/2,1)
id1 <- seq(1+length(gbm)/2,length(gbm),1)
id1 <- seq(1,length(gbm)/2,1)
id2 <- seq(1+length(gbm)/2,length(gbm),1)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 20)$y)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 20)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
gbm.smooth1
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
length(gbm.smooth1)
length(gbm)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 20)$y)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 20)$y,smooth.spline(gbm[id2],df = 40)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 20)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
id1 <- seq(1,length(gbm)/2,1)
id2 <- seq(1+length(gbm)/2,length(gbm),1)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 5)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 5)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
(gbm.smooth2-gbm)^2 %>% mean %>% sqrt
id1[length(id1)]
id2[1]
1+length(gbm)/2
id2 <- seq((length(gbm)+1)/2,length(gbm),1)
1+length(gbm)/2
id2[1]
gbm <- gbm_vec(1,t = 10000)
d <- gridDiag(FUNvalues = gbm,sublevel = sublv)
id1 <- seq(1,length(gbm)/2,1)
id2 <- seq((length(gbm)+1)/2,length(gbm),1)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 5)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 5)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
(gbm.smooth2-gbm)^2 %>% mean %>% sqrt
library(tidyverse)
library(TDA)
gbm_vec <- function(nsim = 100, t = 25, mu = 0, sigma = 0.1, S0 = 100, dt = 1./365) {
epsilon <- matrix(rnorm(t*nsim), ncol = nsim, nrow = t)
gbm <- exp((mu - sigma * sigma / 2) * dt + sigma * epsilon * sqrt(dt))
gbm <- apply(rbind(rep(S0, nsim), gbm), 2, cumprod)
return(gbm)
}
set.seed(69)
sublv <- T
gbm <- gbm_vec(1,t = 10000)
d <- gridDiag(FUNvalues = gbm,sublevel = sublv)
id1 <- seq(1,length(gbm)/2,1)
id2 <- seq((length(gbm)+1)/2,length(gbm),1)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40)$y,smooth.spline(gbm[id2],df = 10)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 10)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
(gbm.smooth2-gbm)^2 %>% mean %>% sqrt
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40,nknots = 100)$y,smooth.spline(gbm[id2],df = 10)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 10)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40,nknots = 10)$y,smooth.spline(gbm[id2],df = 10)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 10)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
(gbm.smooth2-gbm)^2 %>% mean %>% sqrt
gbm.smooth1 <- c(smooth.spline(gbm[id1],df = 40,nknots = 200)$y,smooth.spline(gbm[id2],df = 10)$y)
gbm.smooth2 <- c(smooth.spline(gbm[id1],df = 10)$y,smooth.spline(gbm[id2],df = 40)$y)
d.smooth1 <- gridDiag(FUNvalues = gbm.smooth1,sublevel = sublv)
d.smooth2 <- gridDiag(FUNvalues = gbm.smooth2,sublevel = sublv)
par(mfrow=c(1,2))
plot(gbm,type="l",col=alpha('black',0.5),ylab="Xt",xlab="t")
lines(gbm.smooth2,type="l",col=alpha('blue', 0.7),lwd=2)
lines(gbm.smooth1,type="l",col=alpha('red' , 0.5),lwd=2)
plot(d$diagram, col=alpha('black',0.5))
plot(d.smooth1$diagram,col='red',add=T)
plot(d.smooth2$diagram,col='blue',add=T)
bottleneck(d.smooth1$diagram,d$diagram,dimension = 0)
bottleneck(d.smooth2$diagram,d$diagram,dimension = 0)
(gbm.smooth1-gbm)^2 %>% mean %>% sqrt
(gbm.smooth2-gbm)^2 %>% mean %>% sqrt
reticulate::repl_python()
x <- seq(0,10,length.out = 50)
y <- 0.3*x + rnorm(100,0,0.2)
plot(x,y)
x <- seq(0,10,length.out = 50)
y <- 0.3*x + rnorm(100,0,0.2)
y <- 0.3*x + rnorm(50,0,0.2)
plot(x,y)
model1 <- lm(y~x)
model1 <- lm(y~x)
summary(model1)
root <- "/Users/vishwanathgl/Documents/Github/robust-PDs"
setwd(root)
source('./RKDE.R')
source('./ph-functions.R')
source('./Clustering/spectral-functions.R')
####################################################################################
dims <- c(0,1,2)
load('./Clustering/data/X.RData')
load('./Clustering/data/cls.RData')
load('./Clustering/data/dist-dgms.RData')
load('./Clustering/data/rkde-dgms.RData')
ad <- lapply(dist.dgms,function(x)x$diagram)
rd <- lapply(rkde.dgms,function(x)x$diagram)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.5)
return(T)})
set.seed(2020)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.5)
return(T)})
set.seed(2020)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 45, cex=0.5)
return(T)})
set.seed(2020)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 60, cex=0.5)
return(T)})
set.seed(7)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 60, cex=0.5)
return(T)})
set.seed(123)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 60, cex=0.5)
return(T)})
set.seed(123)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 45, cex=0.5)
return(T)})
set.seed(123)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.5)
return(T)})
set.seed(2020)
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.3)
return(T)})
set.seed(0.123)
knitr::opts_chunk$set(echo = TRUE)
root <- "/Users/vishwanathgl/Documents/Github/robust-PDs"
setwd(root)
source('./RKDE.R')
source('./ph-functions.R')
source('./Clustering/spectral-functions.R')
library(latex2exp)
set.seed(runif(1))
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.3)
return(T)})
set.seed(runif(1))
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.3)
return(T)})
set.seed(runif(1))
idx <- sample(1:25,6,replace = F) + seq(0,125,by=25)
par(mfrow=c(3,2),oma=c(2,2,2,2),mar=c(1,1,1,1))
sapply(idx,function(i){
P <- X[[i]]
scatter3D(P[,1],P[,2],P[,3],col=alpha("black",0.5), pch=20, main=cls[[i]],phi = 30, cex=0.3)
return(T)})
?knitr::knit
library(knitr)
knitr::opts_knit$set(root.dir = root)
root
setwd(root)
spectral_packages <- c('fossil','kknn')
sapply(spectral_packages,require,character.only=T)
pers.image <- function (d1, nbins, dimension, h)
{
d1 = d1[d1[, 1] == dimension, 2:3, drop = F]
if(!is.empty(d1)){
d1[1,2] <- ifelse(is.infinite(d1[1,2]),2,d1[1,2])
d1[, 2] = d1[, 2] - d1[, 1]
maxD = max(d1)
# maxP = min(d1[, 2])
maxP = max(d1[, 2])
minD = min(0, min(d1))
dx = maxD/nbins
x_lower = seq(minD, maxD, length.out = nbins)
x_upper = x_lower + dx
y_lower = seq(0, maxD, length.out = nbins)
y_upper = y_lower + dx
PSurface = function(point, maxP) {
x = point[1]
y = point[2]
out1 = pnorm(x_upper, mean = x, sd = h) - pnorm(x_lower,
mean = x, sd = h)
out2 = pnorm(y_upper, mean = y, sd = h) - pnorm(y_lower,
mean = y, sd = h)
wgt = y/maxP * (y < maxP) + 1 * (y >= maxP)
return(out1 %o% out2 * wgt)
}
Psurf_mat = apply(d1, 1, PSurface, maxP = maxP)
out = apply(Psurf_mat, 1, sum)
return(matrix(out, nrow = nbins))
} else {
return(matrix(0,nrow=nbins,ncol=nbins))
}
}
bottle <- function(D1,D2,d=0){
id1 <- which(D1[,1]==d)
id2 <- which(D2[,1]==d)
if(is.empty(c(id1,id2))){dist <- 0}
else if(is.empty(id1)){dist <- max(abs(D2[id2,2]-D2[id2,3]))}
else if(is.empty(id2)){dist <- max(abs(D1[id1,2]-D1[id1,3]))}
else if(!is.empty(c(id1,id2))){dist <- bottleneck(D1,D2,dimension=d)}
return(dist)
}
wass <- function(D1,D2,p=1,d=0){
id1 <- which(D1[,1]==d)
id2 <- which(D2[,1]==d)
if(is.empty(c(id1,id2))){dist <- 0}
else if(is.empty(id1)){dist <- (abs(D2[id2,2]-D2[id2,3]))^p %>% sum }
else if(is.empty(id2)){dist <- (abs(D1[id1,2]-D1[id1,3]))^p %>% sum }
else if(!is.empty(c(id1,id2))){dist <- wasserstein(D1,D2,p = p,dimension=d) }
return(dist^(1/p))
}
spectral_packages <- c('fossil','kknn')
sapply(spectral_packages,require,character.only=T)
pers.image <- function (d1, nbins, dimension, h)
{
d1 = d1[d1[, 1] == dimension, 2:3, drop = F]
if(!is.empty(d1)){
d1[1,2] <- ifelse(is.infinite(d1[1,2]),2,d1[1,2])
d1[, 2] = d1[, 2] - d1[, 1]
maxD = max(d1)
# maxP = min(d1[, 2])
maxP = max(d1[, 2])
minD = min(0, min(d1))
dx = maxD/nbins
x_lower = seq(minD, maxD, length.out = nbins)
x_upper = x_lower + dx
y_lower = seq(0, maxD, length.out = nbins)
y_upper = y_lower + dx
PSurface = function(point, maxP) {
x = point[1]
y = point[2]
out1 = pnorm(x_upper, mean = x, sd = h) - pnorm(x_lower,
mean = x, sd = h)
out2 = pnorm(y_upper, mean = y, sd = h) - pnorm(y_lower,
mean = y, sd = h)
wgt = y/maxP * (y < maxP) + 1 * (y >= maxP)
return(out1 %o% out2 * wgt)
}
Psurf_mat = apply(d1, 1, PSurface, maxP = maxP)
out = apply(Psurf_mat, 1, sum)
return(matrix(out, nrow = nbins))
} else {
return(matrix(0,nrow=nbins,ncol=nbins))
}
}
bottle <- function(D1,D2,d=0){
id1 <- which(D1[,1]==d)
id2 <- which(D2[,1]==d)
if(is.empty(c(id1,id2))){dist <- 0}
else if(is.empty(id1)){dist <- max(abs(D2[id2,2]-D2[id2,3]))}
else if(is.empty(id2)){dist <- max(abs(D1[id1,2]-D1[id1,3]))}
else if(!is.empty(c(id1,id2))){dist <- bottleneck(D1,D2,dimension=d)}
return(dist)
}
wass <- function(D1,D2,p=1,d=0){
id1 <- which(D1[,1]==d)
id2 <- which(D2[,1]==d)
if(is.empty(c(id1,id2))){dist <- 0}
else if(is.empty(id1)){dist <- (abs(D2[id2,2]-D2[id2,3]))^p %>% sum }
else if(is.empty(id2)){dist <- (abs(D1[id1,2]-D1[id1,3]))^p %>% sum }
else if(!is.empty(c(id1,id2))){dist <- wasserstein(D1,D2,p = p,dimension=d) }
return(dist^(1/p))
}
